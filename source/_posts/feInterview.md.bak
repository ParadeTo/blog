---
title: 前端面试题汇总-持续更新
date: 2017-04-08 12:00:20
tags: 
- 面试
categories:
- 前端理论
description: 各种面试题汇总
---

# js
## 分别用ES5和ES6实现函数默认参数

```javascript
function log1(x, y) {
  y = y || 'world'
  console.log(x, y)
}

function log2(x, y="world") {
  console.log(x, y)
}
```

问题：当y转换为Boolean类型的值为False时，会有不合理的情况出现

```javascript
log1(1, '') // 1 'world'
log2(1, '') // 1 ''
```
## let var区别
	
* let有块级作用域
* let不存在变量提升
* 不允许重复声明
* 暂时性死区
	
```javascript
var tmp = 123;

if (true) {
  tmp = 'abc'; // ReferenceError
  let tmp;
}
```
		
3. class实现私有方法

	```javascript
	const bar = Symbol('bar')

	class MyClass {
	  // 公有办法
	  foo(baz) {
	    this[bar](baz)
	  }
	
	  // 私有方法
	  [bar](baz) {
	    console.log(baz)
	  }
	}
	```

4. const 定义的对象，能够添加属性吗？

	可以，如果要实现不能添加属性，可以用``Object.freeze()`` 
    
5. 利用Set对数组去重

	```javascript
	[...new Set(array)]
	//
	Array.from(new Set(array))
	```
6. Javascript的对象有什么缺点？为什么需要Map?
	
	``{}``只能用字符串作为键。

7. Js类型判断

	* typeof：可以准确判断出基础类型，引用类型都``object``
	* instanceof: ``[] instanceof Object // true``。只能判断两个对象是否属于原型链的关系，不能获取对象的具体类型
	* constructor
	
	```javascript
	function F(){}
	new F().constructor === F
	true
	F.prototype.constructor === F
	true
	```
		null和undefined是无效的对象，没有constructor；重写prototype后，原有的constructor会丢失
	
	* Object.prototype.toString
	
	```javascript
	Object.prototype.toString.call('') ;   // [object String]
	Object.prototype.toString.call(1) ;    // [object Number]
	Object.prototype.toString.call(true) ; // [object Boolean]
	Object.prototype.toString.call(undefined) ; // [object Undefined]
	Object.prototype.toString.call(null) ; // [object Null]
	Object.prototype.toString.call(new Function()) ; // [object Function]
	Object.prototype.toString.call(new Date()) ; // [object Date]
	Object.prototype.toString.call([]) ; // [object Array]
	Object.prototype.toString.call(new RegExp()) ; // [object RegExp]
	Object.prototype.toString.call(new Error()) ; // [object Error]
	Object.prototype.toString.call(document) ; // [object HTMLDocument]
	Object.prototype.toString.call(window) ; //[object global] window是全局对象global
	```
		

# 实战
1. 手机调试方法

fiddle代理