---
title: webkit 技术内幕
date: 2018-01-04 20:38:08
tags:
- webkit
categories:
- 读书笔记
description: webkit 技术内幕
---

# 浏览器和浏览器内核
## 浏览器
### 浏览器简介
* 第一个浏览器 WorldWideWeb (Nexus)
* 1993 年，Mosaic 浏览器诞生 （网景浏览器 Netscape）
* 1995 年，IE
* 2004 年，Firefox 1.0
* 2003 年，Safari （webkit 内核）
* 2008 年，chrominum （webkit 内核）
* 2013 年，blink内核（源于 webkit）

### 浏览器特性
* 网络
* 资源管理
* 网页浏览
* 多页面管理
* 插件和拓展
* 账户和同步
* 安全机制
* 开发者工具

### HTML
HTML (HyperText Markup Language)

2012 年，HTML5 推出，包含十个类别：

* 离线(offline)
* 存储(storage)
* 连接(connectivity)
* 文件访问(file access)
* 语义(semantics)
* 音频和视频(audio/video)
* 3D和图形(3D/graphics)
* 展示(presentation)
* 性能(performance)
* 其他(Nuts and bolts)

### 用户代理和浏览器行为
User Agent

## 浏览器内核及特性
### 内核和主流内核
内核/渲染引擎：将 HTML/CSS/JavaScript 文本及相应的资源文件转变成可视化（可听化）的图像结果的模块

* Trident: IE
* Gecko: Firefox
* Webkit: Safari, Chromium/Chrome, Android, ChromeOS, WebOS

### 内核特征
* HTML 解释器
* CSS 解释器
* 布局
* JavaScript 引擎
* 绘图

## Webkit 内核
### Webkit 介绍

* webkit 嵌入式接口（API）: 这是狭义的webkit
* webcore
* javascript 引擎
* 调用系统或依赖库接口的桥接层

### webkit 和 webkit2
这里指狭义的 webkit。

webkit2 是一组新的编程接口

### chromium 内核：blink
2013年从 webkit 分离出来

未来会加入的新技术：

* 跨进程的 iframe
* 重新整理和修改 webkit 网络方面的架构和接口
* 将 DOM 树引入 JavaScript 引擎中
* 性能优化

# HTML 网页和结构
## 网页结构
### 框结构
### 层次结构
以下面代码为例说明层次结构：

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
    <style>
        video, div, canvas {
            transform: rotateY(30deg) rotateX(-45deg);
        }
    </style>
</head>
<body>
    <video autoplay src="http://www.w3school.com.cn/i/movie.ogg"></video>
    <div>
        <canvas id="a2d"></canvas><br>
        <canvas id="a3d"></canvas>
    </div>
    <script>
        var size = 300

        var a2dCtx = document.getElementById('a2d').getContext('2d')
        a2dCtx.canvas.width = size
        a2dCtx.canvas.height = size
        a2dCtx.fillStyle = "rgba(0,192,192,80)"
        a2dCtx.fillRect(0,0,200,200)

        var a3dCtx = document.getElementById('a3d').getContext('experimental-webgl')
        a3dCtx.canvas.width = size
        a3dCtx.canvas.height = size
        a3dCtx.clearColor(0.0, 192.0/255.0, 192.0/255.0, 80.0/255.0)
        a3dCtx.clear(a3dCtx.COLOR_BUFFER_BIT)
    </script>
</body>
</html>
```

![](webkit-tech/2-1.png)

* 根层：整个网页
* 层1：video，为它创建一个新的层可以更有效地处理视频解码器和浏览器之间的交互和渲染问题
* 层2：div，因为需要进行3d变换
* 层3和层4：对应 canvas，因为需要绘图

`chrome` 调试器里面的 `layers` 模块可以看到 

# webkit 的网页渲染过程
三个阶段

* url 到构建完 DOM 树
图中蓝线表示 `DOMContentLoaded` 事件触发，红线表示 `onLoad` 事件触发
![](webkit-tech/2-2.png)

* CSS + DOM  构建 RenderObject 树，根据网页层次结构创建 RenderLayer 树， 构建 Webkit 绘图上下文
* 绘图上下文到生成最终的图像


# WebKit 架构和模块
## WebKit 架构和模块
### 架构

![](webkit-tech/3-1.png)

* 虚线表示在不同的浏览器中的实现是不一样的，实线基本上是共享的。
* chrominum 中的 js 引擎是 v8 引擎

## 基于 Blink 的 Chromium 浏览器结构
### Chromium 浏览器的架构及模块
#### 架构和模块

![](webkit-tech/3-2.png)

#### 多进程模型
* 避免单个页面的不响应影响整个浏览器
* 第三方插件崩溃不会影响页面或浏览器的稳定性，因为插件也是使用单独进程来运行
* 方便安全模型实施，沙箱模型是基于多进程架构的

主要的进程：

* browser 进程：浏览器主进程，负责浏览器界面显示、各个页面的管理，是所有其他类型进程的祖先，负责他们的创建和销毁，有且只有一个。
* renderer 进程：渲染进程，同打开的网页数量不一定一致。Android 上数量被严格限制，即后台的网页其渲染设施会被清除，再次切换的时候，需要重新加载和渲染。
* npapi 插件进程
* GPU 进程：最多一个，当且仅当gup硬件加速打开的时候才会被创建。Android 上面演变成一个线程
* Pepper 插件进程
# HTML 解释器和 DOM 模型
## DOM 模型
### DOM 标准

#### browser 进程和 renderer 进程
**DOM Level 1**

![](webkit-tech/3-3.png)

* webkit 层：基于 webkit 接口层的浏览器直接在这上面构建
* 黏附层：解决 chromium 中的一些类型和 webkit 内部不一致
* Renderer 层：处理进程间通信，接受来自 Browser 进程的请求，调用相应的 webkit 接口层
* RendererHost：处理进程间通信，给 Renderer 进程发送请求并接收来自 Renderer 进程的结果
* web contents：表示网页内容


#### 多线程模型
对于 Browser 进程

* 保持用户界面的高响应度
* 保证 UI 线程（Browser 进程中的主线程）不会被任何其他费时的操作阻碍（本地文件读写，socket读写等）

对于 Renderer 进程则不让其他操作阻止渲染线程的快速执行。

网页的加载和渲染过程基本工作方式如下：

1. Browser 进程收到用户的请求，首先由 UI 线程处理，而且将相应的任务转给 IO 线程，然后传递给 Renderer 进程
2. Renderer 进程的 IO 线程经过简单解释后交给渲染线程。渲染线程接受请求，加载网页并渲染页面，这其中可能需要 Browser 进程获取资源和需要 GPU 进程来帮助渲染。
最后将结果传递给 Browser 进程。
3. Browser 进程接收到结果并将结果绘制出来

#### content 接口

## webkit2

# 资源加载和网络栈
## webkit 资源加载机制
### 资源

![](webkit-tech/4-1.png)

### 资源缓存

这里的缓存指的是内存缓存，跟后面所说的磁盘缓存不同。

可以解释为什么一个页面中引用了同一个资源多次，只会下载一次。

![](webkit-tech/4-1.png)


### 资源加载器

* 针对每种资源类型的特定加载器
* 缓存资源加载器 CachedResourceLoader
* 通用的资源加载器 ResourceLoader

### 过程

**javascript 会阻塞主线程的渲染过程，webkit是如何优化的呢？**

当前的主线程被阻塞时，webkit 会启动另外一个线程去遍历后面的html网页，收集需要的资源url，然后发送请求。

### 资源的生命周期
LRU (Least Recent Used) 算法

缓存
* 1998年
* Core：一组底层的接口，可以表示任何结构化文档，同时也允许对接口进行拓展
* HTML：在 Core 定义的接口之上，主要为了对 HTML 文档进行访问。把 HTML 中的内容定义为文档、节点、属性、元素、文本等。

**DOM Level 2**

* 2000年
* Core：对 1 的拓展，getElementById
* Views：描述跟踪一个文档的各种视图
* Events：对 DOM 事件的处理，主要有 EventTarget、Mouse 事件等接口。不支持键盘事件
* Style：一种新接口，可以修改 HTML 元素的样式属性
* Tranversal and range：遍历树，对指定范围的文档修改、删除操作
* HTML：允许动态访问和修改 HTML 文档

**DOM Level 3**

* 2004年
* Core：新接口 adoptNode 和 textContent
* Load and Save：允许动态加载 XML 文件并解释成 DOM 表示的文档结构
* Validation：允许程序验证文档的有效性
* Events：支持键盘事件
* Style：一种新接口，可以修改 HTML 元素的样式属性
* XPath

### DOM 树
#### 结构模型
#### DOM 树

## HTML 解释器
### 解释过程
![](webkit-tech/5-1.png)

* 字节流通过解码成为字符流
* 通过词法分析器被解释成词语
* 通过语法分析器构建节点
* 组建成 DOM 树

![](webkit-tech/5-2.png)
![](webkit-tech/5-3.png)
### 词法分析
**HTMLTokenizer**
![](webkit-tech/5-4.png)

### XSSAuditor 验证词语

### 词语到节点
HTMLTreeBuilder 中 constructTree 方法
![](webkit-tech/5-5.png)

### 节点到 DOM 树
* 由 HTMLConstructionSite 类来完成
* 使用栈结构来保存

### 网页基础设施
![](webkit-tech/5-6.png)


### 使用影子 DOM

